#add in all the moves
all_moves_df <- add_all_moves(pgn2, initial_board, move_cutoff = NULL)
library(tweenr)
library(animation)
library(ggplot2)
library(grid)
library(png)
#create the gif
filename <- "C:/Users/WS-Guest/Desktop/chess_gif"
rm(list=ls())
pgn2 <- "1.e4 d5 2.exd5 c6 3.dxc6 Bd7 4.cxb7 Be6 5.bxa8=Q Bf5 6.b4 a5 7.bxa5 Qb6 8.axb6 Kd7 9.b7 Nc6 10.b8=R h6 11.Qa7 h6"
#create the initial df
initial_board <- setup_board()
#add in all the moves
all_moves_df <- add_all_moves(pgn2, initial_board, move_cutoff = NULL)
#create the gif
filename <- "C:/Users/WS-Guest/Desktop/chess_gif"
create_chess_gif(all_moves_df, speed = 20, pause_end = TRUE, frames = 50, filename)
library(kaRpov)
pgn2 <- "1.e4 d5 2.exd5 c6 3.dxc6 Bd7 4.cxb7 Be6 5.bxa8=Q Bf5 6.b4 a5 7.bxa5 Qb6 8.axb6 Kd7 9.b7 Nc6 10.b8=R h6 11.Qa7 Kd6 12.Qa3 Kd5 13.Rb7 kd4"
#create the initial df
initial_board <- setup_board()
#add in all the moves
all_moves_df <- add_all_moves(pgn2, initial_board, move_cutoff = NULL)
library(tweenr)
library(animation)
library(ggplot2)
library(grid)
library(png)
#create the gif
filename <- "C:/Users/WS-Guest/Desktop/chess_gif"
create_chess_gif(all_moves_df, speed = 20, pause_end = TRUE, frames = 50, filename)
move <- "bxa8=Q"
gsub(".*x", "", gsub("\\+|#|=", "", move))
gsub(".*x", "", gsub("\\+|#|=.", "", move))
library(kaRpov)
pgn2 <- "1.e4 d5 2.exd5 c6 3.dxc6 Bd7 4.cxb7 Be6 5.bxa8=Q Bf5 6.b4 a5 7.bxa5 Qb6 8.axb6 Kd7 9.b7 Nc6 10.b8=R h6 11.Qa7 Kd6 12.Qa3 Kd5 13.Rb7 kd4"
#create the initial df
initial_board <- setup_board()
#add in all the moves
all_moves_df <- add_all_moves(pgn2, initial_board, move_cutoff = NULL)
library(tweenr)
library(animation)
library(ggplot2)
library(grid)
library(png)
#create the gif
filename <- "C:/Users/WS-Guest/Desktop/chess_gif"
create_chess_gif(all_moves_df, speed = 20, pause_end = TRUE, frames = 50, filename)
frames = 50
frames = 200
tween_moves_df <- tween_moves(all_moves_df, frames = frames)
max(tween_moves_df$.frame)
max(tween_moves_df$move)
frame_per_move <- max(tween_moves_df$.frame)/max(tween_moves_df$move)
frame_per_move
frame_per_move <- round(max(tween_moves_df$.frame)/max(tween_moves_df$move))
frame_per_move
head(tween_moves_df)
grep("^B", tween_moves_df$.group)
black_tween_df <- tween_moves_df[grep("^B", tween_moves_df$.group),]
black_shift = 0.3
frame_per_move <- max(tween_moves_df$.frame)/max(tween_moves_df$move)
shifted_frames <- round(frame_per_move * black_shift)
shifted_frames
black_shift = 0.5
frame_per_move <- max(tween_moves_df$.frame)/max(tween_moves_df$move)
shifted_frames <- round(frame_per_move * black_shift)
shifted_frames
black_tween_df <- black_tween_df[-c(1:shifted_frames),]
hold_black_df <- black_tween_df[c((max(black_tween_df$.frame)-shifted_frames):max(black_tween_df$.frame)),]
View(hold_black_df)
(max(black_tween_df$.frame)-shifted_frames)
max(black_tween_df$.frame
)
c((max(black_tween_df$.frame)-shifted_frames + 1):max(black_tween_df$.frame))
hold_black_df <- black_tween_df[which(black_tween_df$.frame %in% c((max(black_tween_df$.frame)-shifted_frames + 1):max(black_tween_df$.frame))),]
View(hold_black_df)
frame_per_move <- max(tween_moves_df$.frame)/max(tween_moves_df$move)
shifted_frames <- round(frame_per_move * black_shift)
black_tween_df <- tween_moves_df[grep("^B", tween_moves_df$.group),]
#remove the first n frames
black_tween_df <- black_tween_df[-c(1:shifted_frames),]
#hold onto the last n frames
hold_black_df <- black_tween_df[which(black_tween_df$.frame %in% c((max(black_tween_df$.frame)-shifted_frames + 1):max(black_tween_df$.frame))),]
#subtract the frame shift from the black_tween_df
black_tween_df$.frame <- black_tween_df$.frame - shifted_frames
tween_moves_df <- rbind(tween_moves_df, black_tween_df, hold_black_df)
tween_moves_df <- tween_moves(all_moves_df, frames = frames)
black_tween_df <- tween_moves_df[grep("^B", tween_moves_df$.group),]
tween_moves_df <- tween_moves_df[-grep("^B", tween_moves_df$.group),]
3202 + 2370
black_tween_df <- black_tween_df[-c(1:shifted_frames),]
#hold onto the last n frames
hold_black_df <- black_tween_df[which(black_tween_df$.frame %in% c((max(black_tween_df$.frame)-shifted_frames + 1):max(black_tween_df$.frame))),]
#subtract the frame shift from the black_tween_df
black_tween_df$.frame <- black_tween_df$.frame - shifted_frames
tween_moves_df <- rbind(tween_moves_df, black_tween_df, hold_black_df)
tween_moves_df <- tween_moves(all_moves_df, frames = frames)
frame_per_move <- max(tween_moves_df$.frame)/max(tween_moves_df$move)
shifted_frames <- round(frame_per_move * black_shift)
black_tween_df <- tween_moves_df[grep("^B", tween_moves_df$.group),]
tween_moves_df <- tween_moves_df[-grep("^B", tween_moves_df$.group),]
#remove the first n frames
black_tween_df <- black_tween_df[-c(1:shifted_frames),]
tween_moves_df <- tween_moves(all_moves_df, frames = frames)
frame_per_move <- max(tween_moves_df$.frame)/max(tween_moves_df$move)
shifted_frames <- round(frame_per_move * black_shift)
black_tween_df <- tween_moves_df[grep("^B", tween_moves_df$.group),]
tween_moves_df <- tween_moves_df[-grep("^B", tween_moves_df$.group),]
#remove the first n frames
black_tween_df <- black_tween_df[-which(black_tween_df$.frame %in% 1:shifted_frames),]
#hold onto the last n frames
hold_black_df <- black_tween_df[which(black_tween_df$.frame %in% c((max(black_tween_df$.frame)-shifted_frames + 1):max(black_tween_df$.frame))),]
#subtract the frame shift from the black_tween_df
black_tween_df$.frame <- black_tween_df$.frame - shifted_frames
tween_moves_df <- rbind(tween_moves_df, black_tween_df, hold_black_df)
tween_moves_df <- tween_moves(all_moves_df, frames = frames)
frame_per_move <- max(tween_moves_df$.frame)/max(tween_moves_df$move)
shifted_frames <- round(frame_per_move * black_shift)
black_tween_df <- tween_moves_df[grep("^B", tween_moves_df$.group),]
tween_moves_df <- tween_moves_df[-grep("^B", tween_moves_df$.group),]
black_tween_df <- black_tween_df[-which(black_tween_df$.frame %in% 1:shifted_frames),]
hold_black_df <- black_tween_df[which(black_tween_df$.frame %in% c((max(black_tween_df$.frame)-shifted_frames + 1):max(black_tween_df$.frame))),]
black_tween_df$.frame <- black_tween_df$.frame - shifted_frames
View(black_tween_df)
frame_per_move <- max(tween_moves_df$.frame)/max(tween_moves_df$move)
shifted_frames <- round(frame_per_move * black_shift)
black_tween_df <- tween_moves_df[grep("^B", tween_moves_df$.group),]
tween_moves_df <- tween_moves_df[-grep("^B", tween_moves_df$.group),]
#remove the first n frames
black_tween_df <- black_tween_df[-which(black_tween_df$.frame %in% 1:shifted_frames),]
#hold onto the last n frames
hold_black_df <- black_tween_df[which(black_tween_df$.frame %in% c((max(black_tween_df$.frame)-shifted_frames + 1):max(black_tween_df$.frame))),]
#subtract the frame shift from the black_tween_df
black_tween_df$.frame <- black_tween_df$.frame - shifted_frames
tween_moves_df <- rbind(tween_moves_df, black_tween_df, hold_black_df)
frame_per_move <- max(tween_moves_df$.frame)/max(tween_moves_df$move)
shifted_frames <- round(frame_per_move * black_shift)
black_tween_df <- tween_moves_df[grep("^B", tween_moves_df$.group),]
tween_moves_df <- tween_moves_df[-grep("^B", tween_moves_df$.group),]
#remove the first n frames
black_tween_df <- black_tween_df[-which(black_tween_df$.frame %in% 1:shifted_frames),]
tween_moves_df <- tween_moves(all_moves_df, frames = frames)
frame_per_move <- max(tween_moves_df$.frame)/max(tween_moves_df$move)
shifted_frames <- round(frame_per_move * black_shift)
black_tween_df <- tween_moves_df[grep("^B", tween_moves_df$.group),]
tween_moves_df <- tween_moves_df[-grep("^B", tween_moves_df$.group),]
black_tween_df <- black_tween_df[-which(black_tween_df$.frame %in% 1:shifted_frames),]
hold_black_df <- black_tween_df[which(black_tween_df$.frame %in% c((max(black_tween_df$.frame)-shifted_frames + 1):max(black_tween_df$.frame))),]
tween_moves_df <- tween_moves(all_moves_df, frames = frames)
frame_per_move <- max(tween_moves_df$.frame)/max(tween_moves_df$move)
shifted_frames <- round(frame_per_move * black_shift)
black_tween_df <- tween_moves_df[grep("^B", tween_moves_df$.group),]
tween_moves_df <- tween_moves_df[-grep("^B", tween_moves_df$.group),]
black_tween_df <- black_tween_df[-which(black_tween_df$.frame %in% 0:(shifted_frames-1)),]
View(black_tween_df)
hold_black_df <- black_tween_df[which(black_tween_df$.frame %in% c((max(black_tween_df$.frame)-shifted_frames + 1):max(black_tween_df$.frame))),]
black_tween_df$.frame <- black_tween_df$.frame - shifted_frames
View(black_tween_df)
View(hold_black_df)
tween_moves_df <- rbind(tween_moves_df, black_tween_df, hold_black_df)
View(tween_moves_df)
library(kaRpov)
pgn2 <- "1.e4 d5 2.exd5 c6 3.dxc6 Bd7 4.cxb7 Be6 5.bxa8=Q Bf5 6.b4 a5 7.bxa5 Qb6 8.axb6 Kd7 9.b7 Nc6 10.b8=R h6 11.Qa7 Kd6 12.Qa3 Kd5 13.Rb7 kd4"
#create the initial df
initial_board <- setup_board()
#add in all the moves
all_moves_df <- add_all_moves(pgn2, initial_board, move_cutoff = NULL)
library(tweenr)
library(animation)
library(ggplot2)
library(grid)
library(png)
#create the gif
filename <- "C:/Users/WS-Guest/Desktop/chess_gif"
create_chess_gif(all_moves_df, speed = 20, pause_end = TRUE, frames = 50, black_shift = 0.5, filename)
create_chess_gif(all_moves_df, speed = 15, pause_end = TRUE, frames = 200, black_shift = 0.5, filename)
library(kaRpov)
#the pgn for the [immortal game]()
immortal_pgn <- "1.e4 e5 2.f4 exf4 3.Bc4 Qh4+ 4.Kf1 b5 5.Bxb5 Nf6 6.Nf3 Qh6 7.d3 Nh5 8.Nh4 Qg5 9.Nf5 c6 10.g4 Nf6 11.Rg1 cxb5 12.h4 Qg6 13.h5 Qg5 14.Qf3 Ng8 15.Bxf4 Qf6 16.Nc3 Bc5 17.Nd5 Qxb2 18.Bd6 Bxg1 19.e5 Qxa1+ 20.Ke2 Na6 21.Nxg7+ Kd8 22.Qf6+ Nxf6 23.Be7#"
filename <- "C:/Users/WS-Guest/Desktop/chess_gif"
library(tweenr)
library(animation)
library(ggplot2)
library(grid)
library(png)
#create the gif
plot_pgn <- function(pgn,
light_col = "#f5f5dc", dark_col = "#00688b", square_labels = FALSE, plot = FALSE,
move_cutoff = NULL, frames = 100,
speed = 20, pause_end = TRUE, black_shift = NULL,
name = "chess_plot.gif")
))()
rm(list=ls())
immortal_pgn <- "1.e4 e5 2.f4 exf4 3.Bc4 Qh4+ 4.Kf1 b5 5.Bxb5 Nf6 6.Nf3 Qh6 7.d3 Nh5 8.Nh4 Qg5 9.Nf5 c6 10.g4 Nf6 11.Rg1 cxb5 12.h4 Qg6 13.h5 Qg5 14.Qf3 Ng8 15.Bxf4 Qf6 16.Nc3 Bc5 17.Nd5 Qxb2 18.Bd6 Bxg1 19.e5 Qxa1+ 20.Ke2 Na6 21.Nxg7+ Kd8 22.Qf6+ Nxf6 23.Be7#"
filename <- "C:/Users/WS-Guest/Desktop/chess_gif"
library(tweenr)
library(animation)
library(ggplot2)
library(grid)
library(png)
#create the gif
plot_pgn (pgn,
light_col = "#f5f5dc", dark_col = "#00688b", square_labels = FALSE, plot = FALSE,
move_cutoff = NULL, frames = 100,
speed = 20, pause_end = TRUE, black_shift = NULL,
name = filename)
immortal_pgn <- "1.e4 e5 2.f4 exf4 3.Bc4 Qh4+ 4.Kf1 b5 5.Bxb5 Nf6 6.Nf3 Qh6 7.d3 Nh5 8.Nh4 Qg5 9.Nf5 c6 10.g4 Nf6 11.Rg1 cxb5 12.h4 Qg6 13.h5 Qg5 14.Qf3 Ng8 15.Bxf4 Qf6 16.Nc3 Bc5 17.Nd5 Qxb2 18.Bd6 Bxg1 19.e5 Qxa1+ 20.Ke2 Na6 21.Nxg7+ Kd8 22.Qf6+ Nxf6 23.Be7#"
filename <- "C:/Users/WS-Guest/Desktop/chess_gif"
library(tweenr)
library(animation)
library(ggplot2)
library(grid)
library(png)
#create the gif
plot_pgn (immortal_pgn,
light_col = "#f5f5dc", dark_col = "#00688b", square_labels = FALSE, plot = FALSE,
move_cutoff = NULL, frames = 100,
speed = 20, pause_end = TRUE, black_shift = NULL,
name = filename)
rm(list=ls())
library(kaRpov)
#the pgn for the [immortal game]()
immortal_pgn <- "1.e4 e5 2.f4 exf4 3.Bc4 Qh4+ 4.Kf1 b5 5.Bxb5 Nf6 6.Nf3 Qh6 7.d3 Nh5 8.Nh4 Qg5 9.Nf5 c6 10.g4 Nf6 11.Rg1 cxb5 12.h4 Qg6 13.h5 Qg5 14.Qf3 Ng8 15.Bxf4 Qf6 16.Nc3 Bc5 17.Nd5 Qxb2 18.Bd6 Bxg1 19.e5 Qxa1+ 20.Ke2 Na6 21.Nxg7+ Kd8 22.Qf6+ Nxf6 23.Be7#"
filename <- "C:/Users/WS-Guest/Desktop/chess_gif"
library(tweenr)
library(animation)
library(ggplot2)
library(grid)
library(png)
#create the gif
plot_pgn (immortal_pgn,
light_col = "#f5f5dc", dark_col = "#00688b", square_labels = FALSE, plot = FALSE,
move_cutoff = NULL, frames = 100,
speed = 20, pause_end = TRUE, black_shift = NULL,
name = filename)
library(kaRpov)
filename <- "C:/Users/MagnusCarlsen/Desktop/chess_gif"
pgn2 <- "1.e4 e5 2.Nf3 Nc6 3.Bb5 g6 4.Bxc6 bxc6 5.Nxe5 Bg7 6.d4 Qe7 7.f4 c5 8.O-O c4 9.b3 cxb3 10.Nc3 bxa2 11.Rb1 axb1=Q 12.Bd2 a6 13.Be3 a5 14.Bf2 a4 15.Bg3 a3 16.Bh4 a2 17.Bg3 a1=R 18.Bf2 c6 19.Bg3 c5 20.Bh4"
library(tweenr)
library(animation)
library(ggplot2)
library(grid)
library(png)
initial_board <- create_board()
all_moves_df <- kaRpov::add_all_moves(pgn2, initial_board, NULL)
move_cutoff <- NULL
pgn <- pgn2
all_moves_df <- initial_board
#how many moves to process
if(is.null(move_cutoff)){
total_moves <- total_move_nos(pgn)
} else {
total_moves <- move_cutoff
}
for(move_number in 1:total_moves){
#pgn lists moves as 1. W B 2. W B ... so need to find 'round' first
pgn_round <- ceiling(move_number/2)
#then find which colour is taking the move
move_colours <- c("B", "W")
move_colour <- move_colours[(move_number %% 2) + 1]
current_move <- get_move(pgn, move_colour, pgn_round)
#subset the last move
current_move_df <- all_moves_df[which(all_moves_df$move == (move_number - 1)),]
#set the cols
current_move_df$move <- move_number
current_move_df$player <- as.character(move_colour)
current_move_df$piece_position_before <- as.character(current_move_df$piece_position_after)
current_move_df$piece_position_after <- as.character(current_move_df$piece_position_after)
current_move_df$movement <- current_move
#update with positions after the move
current_move_df <- add_next_move(current_move, move_colour, current_move_df)
all_moves_df <- rbind(all_moves_df, current_move_df)
}
for(move_number in 1){
#pgn lists moves as 1. W B 2. W B ... so need to find 'round' first
pgn_round <- ceiling(move_number/2)
#then find which colour is taking the move
move_colours <- c("B", "W")
move_colour <- move_colours[(move_number %% 2) + 1]
current_move <- get_move(pgn, move_colour, pgn_round)
#subset the last move
current_move_df <- all_moves_df[which(all_moves_df$move == (move_number - 1)),]
#set the cols
current_move_df$move <- move_number
current_move_df$player <- as.character(move_colour)
current_move_df$piece_position_before <- as.character(current_move_df$piece_position_after)
current_move_df$piece_position_after <- as.character(current_move_df$piece_position_after)
current_move_df$movement <- current_move
#update with positions after the move
current_move_df <- add_next_move(current_move, move_colour, current_move_df)
all_moves_df <- rbind(all_moves_df, current_move_df)
}
move_number <- 1
add_next_move <- function(move, move_colour, current_move_df){
#  #if a pawn has been promoted on the previous move change the piece ids to be updated
#  piece_mismatch <- which(current_move_df$piece != gsub("^[W|B]", "", gsub("\\..*", "", current_move_df$piece_id)))
#if(length(piece_mismatch) > 0){
#  mismatch_df <- current_move_df[piece_mismatch,]
#  current_move_df <- current_move_df[-piece_mismatch,]
#    #add star in to show progressed
#  mismatch_df$piece_id <- paste0(mismatch_df$piece_colour, mismatch_df$piece, "*")
#  current_move_df <- rbind(current_move_df, mismatch_df)
#  current_move_df$piece_id <- make.unique(as.character(current_move_df$piece_id))
#}
#remove pieces that are about to be taken
current_move_df <- remove_taken_pieces(move, current_move_df)
#the final position of the moving piece
if(!grepl("O-O", move)){
final_position <- clean_move(move)
#find the index of the moving piece
if(grepl("^[a-z]", move)){
#pawn move
moving_piece_index <- find_pawn_position(move, move_colour, current_move_df)
} else if(grepl("K", move)){
#king move
moving_piece_index <- find_king_position(move, move_colour, current_move_df)
} else if(grepl("Q", move)){
#queen move
moving_piece_index <- find_queen_position(move, move_colour, current_move_df)
} else if(grepl("B", move)){
#bishop move
moving_piece_index <- find_bishop_position(move, move_colour, current_move_df)
} else if(grepl("R", move)){
#rook move
moving_piece_index <- find_rook_position(move, move_colour, current_move_df)
} else if(grepl("N", move)){
#knight move
moving_piece_index <- find_knight_position(move, move_colour, current_move_df)
#castling
}
#move the piece
current_move_df$piece_position_after[moving_piece_index] <- final_position
}
king_row <- which(current_move_df$piece_colour == move_colour & current_move_df$piece == "K")
rook_rows <- which(current_move_df$piece_colour == move_colour & current_move_df$piece == "R")
if(move == "O-O"){
rook_row <- rook_rows[grep("h", current_move_df$piece_position_before[rook_rows])]
current_move_df$piece_position_after[king_row] <- gsub("e", "g", current_move_df$piece_position_before[king_row])
current_move_df$piece_position_after[rook_row] <- gsub("h", "f", current_move_df$piece_position_before[rook_row])
} else if(move == "O-O-O"){
rook_row <- rook_rows[which(current_move_df$piece_position_before[rook_rows] == "a8")]
current_move_df$piece_position_after[king_row] <- gsub("e", "c", current_move_df$piece_position_before[king_row])
current_move_df$piece_position_after[rook_row] <- gsub("a", "d", current_move_df$piece_position_before[rook_row])
}
#if a pawn is promoted change it to the piece it will become
if(grepl("=", move)){
current_move_df$piece[moving_piece_index] <- gsub(".*=", "", move)
}
return(current_move_df)
}
#pgn lists moves as 1. W B 2. W B ... so need to find 'round' first
pgn_round <- ceiling(move_number/2)
#then find which colour is taking the move
move_colours <- c("B", "W")
move_colour <- move_colours[(move_number %% 2) + 1]
current_move <- get_move(pgn, move_colour, pgn_round)
#subset the last move
current_move_df <- all_moves_df[which(all_moves_df$move == (move_number - 1)),]
current_move_df$move <- move_number
current_move_df$player <- as.character(move_colour)
current_move_df$piece_position_before <- as.character(current_move_df$piece_position_after)
current_move_df$piece_position_after <- as.character(current_move_df$piece_position_after)
current_move_df$movement <- current_move
move_number
current_move_df <- all_moves_df[which(all_moves_df$move == (move_number - 1)),]
head(all_moves_df)
initial)board
head(initial_board)
initial)board <- setup_board()
initial_board <- setup_board()
rm(list=ls())
filename <- "C:/Users/MagnusCarlsen/Desktop/chess_gif"
pgn2 <- "1.e4 e5 2.Nf3 Nc6 3.Bb5 g6 4.Bxc6 bxc6 5.Nxe5 Bg7 6.d4 Qe7 7.f4 c5 8.O-O c4 9.b3 cxb3 10.Nc3 bxa2 11.Rb1 axb1=Q 12.Bd2 a6 13.Be3 a5 14.Bf2 a4 15.Bg3 a3 16.Bh4 a2 17.Bg3 a1=R 18.Bf2 c6 19.Bg3 c5 20.Bh4"
initial_board <- setup_board()
move_cutoff <- NULL
pgn <- pgn2
all_moves_df <- initial_board
#how many moves to process
if(is.null(move_cutoff)){
total_moves <- total_move_nos(pgn)
} else {
total_moves <- move_cutoff
}
for(move_number in 1:total_moves){
#pgn lists moves as 1. W B 2. W B ... so need to find 'round' first
pgn_round <- ceiling(move_number/2)
#then find which colour is taking the move
move_colours <- c("B", "W")
move_colour <- move_colours[(move_number %% 2) + 1]
current_move <- get_move(pgn, move_colour, pgn_round)
#subset the last move
current_move_df <- all_moves_df[which(all_moves_df$move == (move_number - 1)),]
#set the cols
current_move_df$move <- move_number
current_move_df$player <- as.character(move_colour)
current_move_df$piece_position_before <- as.character(current_move_df$piece_position_after)
current_move_df$piece_position_after <- as.character(current_move_df$piece_position_after)
current_move_df$movement <- current_move
#update with positions after the move
current_move_df <- add_next_move(current_move, move_colour, current_move_df)
all_moves_df <- rbind(all_moves_df, current_move_df)
}
View(all_moves_df)
library(kaRpov)
rm(list=ls())
pgn2 <- "1.e4 e5 2.Nf3 Nc6 3.Bb5 g6 4.Bxc6 bxc6 5.Nxe5 Bg7 6.d4 Qe7 7.f4 c5 8.O-O c4 9.b3 cxb3 10.Nc3 bxa2 11.Rb1 axb1=Q 12.Bd2 a6 13.Be3 a5 14.Bf2 a4 15.Bg3 a3 16.Bh4 a2 17.Bg3 a1=R 18.Bf2 c6 19.Bg3 c5 20.Bh4"
initial_board <- setup_board()
pgn <- pgn2
move_cutoff <- NULL
all_moves_df <- add_all_moves(pgn, initial_board, move_cutoff = NULL)
View(all_moves_df)
library(tweenr)
which(names(all_moves_df) %in% c("piece", "move", "piece_id"))
merge_df <- all_moves_df[which(names(all_moves_df) %in% c("piece", "move", "piece_id"))]
all_ids <- unique(initial_board$piece_id)
all_ids
levels(all_moves_df$piece_id)
length(levels(all_moves_df$piece_id))
all_moves_df$piece_id[which(all_moves_df$move == max(all_moves_df$move))]
all_ids <- levels(all_moves_df$piece_id)
all_moves_df$piece_id[which(all_moves_df$move == max(all_moves_df$move))]
as.character(all_moves_df$piece_id[which(all_moves_df$move == max(all_moves_df$move))])
all_ids %in% as.character(all_moves_df$piece_id[which(all_moves_df$move == max(all_moves_df$move))])
!all_ids %in% as.character(all_moves_df$piece_id[which(all_moves_df$move == max(all_moves_df$move))])
which(!all_ids %in% as.character(all_moves_df$piece_id[which(all_moves_df$move == max(all_moves_df$move))]))
all_ids[which(!all_ids %in% as.character(all_moves_df$piece_id[which(all_moves_df$move == max(all_moves_df$move))]))]
missing_pieces <- all_ids[which(!all_ids %in% as.character(all_moves_df$piece_id[which(all_moves_df$move == max(all_moves_df$move))]))]
missing_pieces
missing_pieces
10:0
1:1
10
11:15
x <- all_moves_df[10,]
x
rep(x, 5)
class(x)
rep(x)
seq(x, 5)
replicate(x, 5)
library(devtools)
install.packages("devtools")
library(devtools)
devtools::insta\
devtools::install_github("thomasp85/tweenr")
library(tweenr)
install.packages('rcpp')
install.packages('Rcpp')
install.packages("Rcpp")
library(tweenr)
frames = 200
#need to merge in piece type later to plot the right pieces
merge_df <- all_moves_df[which(names(all_moves_df) %in% c("piece", "move", "piece_id"))]
all_moves_df <- cbind(all_moves_df, stringr::str_split_fixed(all_moves_df$piece_position_after, "", 2))
names(all_moves_df)[(ncol(all_moves_df)-1):ncol(all_moves_df)] <- c("piece_row", "piece_col")
all_moves_df$piece_row_numeric <- match(all_moves_df$piece_row, letters)
#just as.numeric introduces (rounding?) errors
all_moves_df$piece_col <- as.numeric(as.character(all_moves_df$piece_col))
all_moves_df$ease <- "linear"
#select only the columns to be tweeened
all_moves_df <- all_moves_df[which(names(all_moves_df) %in% c("move", "piece_id", "piece_row_numeric", "piece_col", "ease"))]
#tween the df
tween_moves_df <- tween_elements(all_moves_df, "move", "piece_id", "ease", nframes = frames)
tween_moves_df$move <- floor(tween_moves_df$move)
#merge back the piece types
tween_moves_df <- merge(tween_moves_df, merge_df, by = c("move", "piece_id"))
head(tween_moves_df)
names(tween_moves_df)[ncol(tween_moves_df)] <- "piece_id"
tween_moves_df <- merge(tween_moves_df, merge_df, by = c("move", "piece_id"))
head(tween_moves_df)
View(tween_moves_df)
interpolation <- 0.5
all_ids <- levels(tween_moves_df$piece_id)
missing_pieces <- all_ids[which(!all_ids %in% as.character(tween_moves_df$piece_id[which(tween_moves_df$move == max(tween_moves_df$move))]))]
frame_per_move <- max(tween_moves_df$.frame)/max(tween_moves_df$move)
interpolated_frames <- frame_per_move * interpolation
interpolated_frames
interpolated_frames <- round(frame_per_move * interpolation)
interpolated_frames
missing_pieces
missing_piece <- missing_piece[1]
missing_piece <- missing_pieces[1]
missing_piece
final_frame <- max(tween_moves_df$.frame[which(tween_moves_df$piece_id == missing_piece)])
final_frame
extra_frame_numbers <- (final_frame + 1):(final_frame + interpolated_frames)
extra_frame_numbers
taken_piece_df <- tween_moves_df[which(tween_moves_df$piece_id == missing_piece & tween_moves_df$.frame == final_frame),]
taken_piece_df
taken_piece_df[rep(taken_piece_df, 2)]
taken_piece_df[rep(taken_piece_df), 2]
taken_piece_df[rep(taken_piece_df), 1:2]
replicate(taken_piece_df)
replicate(taken_piece_df, 3)
replicate(taken_piece_df, length = 3)
taken_piece_df[rep(seq_len(nrow(taken_piece_df)), 3), ]
taken_piece_df <- taken_piece_df[rep(seq_len(nrow(taken_piece_df)),interpolated_frames),]
taken_piece_df
taken_piece_df$.frame <- extra_frame_numbers
taken_piece_df
piece <- paste0(gsub("([A-Z])(.*)", "", taken_df$piece_id), taken_df$piece)
piece <- paste0(gsub("([A-Z])(.*)", "", taken_piece_df$piece_id), taken_piece_df$piece)
piece
taken_piece_df$piece_id
gsub("([A-Z])(.*)", "", taken_piece_df$piece_id)
gsub("([A-Z])(.*)", "\\1", taken_piece_df$piece_id)
piece <- paste0(gsub("([A-Z])(.*)", "\\1", taken_piece_df$piece_id), taken_piece_df$piece)
piece
library(kaRpov)
rm(list=ls())
