possible_starting_positions
chess_board <- create_board()
row_positions <- gsub(row, "", current_move_df$piece_position_before[grep(row, current_move_df$piece_position_before)])
col_positions <- gsub(col, "", current_move_df$piece_position_before[grep(col, current_move_df$piece_position_before)])
row_positions
col_positions
if(length(row_positions) == 0){
row_positions <- row
} else{
row_positions <- c(max(row_positions[row > row_positions]), min(row_positions[row < row_positions]))
}
if(length(col_positions) == 0){
col_positions <- col
} else{
col_positions <- c(max(col_positions[col > col_positions]), min(col_positions[col < col_positions]))
}
possible_starting_positions <- c(paste0(row, col_positions), paste0(row_positions, col))
possible_starting_positions
col_positions <- gsub(row, "", current_move_df$piece_position_before[grep(row, current_move_df$piece_position_before)])
row_positions <- gsub(col, "", current_move_df$piece_position_before[grep(col, current_move_df$piece_position_before)])
if(length(row_positions) == 0){
row_positions <- row
} else{
row_positions <- c(max(row_positions[row > row_positions]), min(row_positions[row < row_positions]))
}
if(length(col_positions) == 0){
col_positions <- col
} else{
col_positions <- c(max(col_positions[col > col_positions]), min(col_positions[col < col_positions]))
}
possible_starting_positions <- c(paste0(row, col_positions), paste0(row_positions, col))
possible_starting_positions
possible_starting_positions <- unique(check_valid_square(possible_starting_positions))
possible_starting_positions
possible_starting_positions <- check_ranks(row, col, current_move_df)
possible_starting_positions
check_ranks <- function(row, col, current_move_df){
chess_board <- create_board()
col_positions <- gsub(row, "", current_move_df$piece_position_before[grep(row, current_move_df$piece_position_before)])
row_positions <- gsub(col, "", current_move_df$piece_position_before[grep(col, current_move_df$piece_position_before)])
if(length(row_positions) == 0){
row_positions <- row
} else{
row_positions <- c(max(row_positions[row > row_positions]), min(row_positions[row < row_positions]))
}
if(length(col_positions) == 0){
col_positions <- col
} else{
col_positions <- c(max(col_positions[col > col_positions]), min(col_positions[col < col_positions]))
}
possible_starting_positions <- c(paste0(row, col_positions), paste0(row_positions, col))
possible_starting_positions <- unique(check_valid_square(possible_starting_positions))
return(possible_starting_positions)
}
possible_starting_positions <- check_ranks(row, col, current_move_df)
possible_starting_positions
matching_rooks <- find_matching_pieces(possible_starting_positions, "R", move_colour, current_move_df)
matching_rooks
library(kaRpov)
pgn <- "1.d4 Nf6 2.c4 e6 3.Nc3 Bb4 4.e3 O-O 5.Bd3 d5 6.Nf3 b6 7.a3 Bxc3+ 8.bxc3 c5 9.O-O Bb7 10.cxd5 exd5 11.a4 Nc6 12.Qb3 c4 13.Bxc4 dxc4 14.Qxc4 Re8 15.Re1 Na5 16.Qd3 Rc8 17.Ng5 Ng4 18.Qxh7+ Kf8 19.Ba3+ Rc5 20.dxc5 Nc6 21.cxb6+ Ne7 22.Qh8#"
#create the initial df
initial_board <- setup_board()
all_moves_df <- add_all_moves(pgn, initial_board, move_cutoff = NULL)
move_cutoff = NULL
all_moves_df <- initial_board
#how many moves to process
if(is.null(move_cutoff)){
total_moves <- total_move_nos(pgn)
} else {
total_moves <- move_cutoff
}
for(move_number in 1:total_moves){
#pgn lists moves as 1. W B 2. W B ... so need to find 'round' first
pgn_round <- ceiling(move_number/2)
#then find which colour is taking the move
move_colours <- c("B", "W")
move_colour <- move_colours[(move_number %% 2) + 1]
current_move <- get_move(pgn, move_colour, pgn_round)
#subset the last move
current_move_df <- all_moves_df[which(all_moves_df$move == (move_number - 1)),]
#set the cols
current_move_df$move <- move_number
current_move_df$player <- as.character(move_colour)
current_move_df$piece_position_before <- as.character(current_move_df$piece_position_after)
current_move_df$piece_position_after <- as.character(current_move_df$piece_position_after)
current_move_df$movement <- current_move
#update with positions after the move
current_move_df <- add_next_move(current_move, move_colour, current_move_df)
all_moves_df <- rbind(all_moves_df, current_move_df)
}
move
move <- current_move
current_move_df <- remove_taken_pieces(move, current_move_df)
final_position <- clean_move(move)
final_position
#clean up the move
final_position <- split_position(clean_move(move))
row <- final_position[1]
col <- as.numeric(final_position[2])
row
col
possible_starting_positions <- check_ranks(row, col, current_move_df)
possible_starting_positions
matching_rooks <- find_matching_pieces(possible_starting_positions, "R", move_colour, current_move_df)
matching_rooks
move_colour
possible_starting_positions
View(current_move_df)
possible_starting_positions
matching_piece_index <- which(current_move_df$piece_colour == move_colour &
current_move_df$piece == piece &
current_move_df$piece_position_before %in% starting_position)
which(current_move_df$piece_colour == move_colour &
current_move_df$piece == "R" &
current_move_df$piece_position_before %in% starting_position)
which(current_move_df$piece_colour == move_colour &
current_move_df$piece == "R" &
current_move_df$piece_position_before %in% possible_starting_positions
)
View(current_move_df)
rm(list=ls())
library(kaRpov)
pgn <- "1.d4 Nf6 2.c4 e6 3.Nc3 Bb4 4.e3 O-O 5.Bd3 d5 6.Nf3 b6 7.a3 Bxc3+ 8.bxc3 c5 9.O-O Bb7 10.cxd5 exd5 11.a4 Nc6 12.Qb3 c4 13.Bxc4 dxc4 14.Qxc4 Re8 15.Re1 Na5 16.Qd3 Rc8 17.Ng5 Ng4 18.Qxh7+ Kf8 19.Ba3+ Rc5 20.dxc5 Nc6 21.cxb6+ Ne7 22.Qh8#"
#create the initial df
initial_board <- setup_board()
all_moves_df <- add_all_moves(pgn, initial_board, move_cutoff = NULL)
move_cutoff = NULL
all_moves_df <- initial_board
#how many moves to process
if(is.null(move_cutoff)){
total_moves <- total_move_nos(pgn)
} else {
total_moves <- move_cutoff
}
for(move_number in 1:8){
#pgn lists moves as 1. W B 2. W B ... so need to find 'round' first
pgn_round <- ceiling(move_number/2)
#then find which colour is taking the move
move_colours <- c("B", "W")
move_colour <- move_colours[(move_number %% 2) + 1]
current_move <- get_move(pgn, move_colour, pgn_round)
#subset the last move
current_move_df <- all_moves_df[which(all_moves_df$move == (move_number - 1)),]
#set the cols
current_move_df$move <- move_number
current_move_df$player <- as.character(move_colour)
current_move_df$piece_position_before <- as.character(current_move_df$piece_position_after)
current_move_df$piece_position_after <- as.character(current_move_df$piece_position_after)
current_move_df$movement <- current_move
#update with positions after the move
current_move_df <- add_next_move(current_move, move_colour, current_move_df)
all_moves_df <- rbind(all_moves_df, current_move_df)
}
View(all_moves_df)
all_moves_df <- initial_board
#how many moves to process
if(is.null(move_cutoff)){
total_moves <- total_move_nos(pgn)
} else {
total_moves <- move_cutoff
}
for(move_number in 1:10){
#pgn lists moves as 1. W B 2. W B ... so need to find 'round' first
pgn_round <- ceiling(move_number/2)
#then find which colour is taking the move
move_colours <- c("B", "W")
move_colour <- move_colours[(move_number %% 2) + 1]
current_move <- get_move(pgn, move_colour, pgn_round)
#subset the last move
current_move_df <- all_moves_df[which(all_moves_df$move == (move_number - 1)),]
#set the cols
current_move_df$move <- move_number
current_move_df$player <- as.character(move_colour)
current_move_df$piece_position_before <- as.character(current_move_df$piece_position_after)
current_move_df$piece_position_after <- as.character(current_move_df$piece_position_after)
current_move_df$movement <- current_move
#update with positions after the move
current_move_df <- add_next_move(current_move, move_colour, current_move_df)
all_moves_df <- rbind(all_moves_df, current_move_df)
}
View(all_moves_df)
all_moves_df <- initial_board
#how many moves to process
if(is.null(move_cutoff)){
total_moves <- total_move_nos(pgn)
} else {
total_moves <- move_cutoff
}
for(move_number in 1:18){
#pgn lists moves as 1. W B 2. W B ... so need to find 'round' first
pgn_round <- ceiling(move_number/2)
#then find which colour is taking the move
move_colours <- c("B", "W")
move_colour <- move_colours[(move_number %% 2) + 1]
current_move <- get_move(pgn, move_colour, pgn_round)
#subset the last move
current_move_df <- all_moves_df[which(all_moves_df$move == (move_number - 1)),]
#set the cols
current_move_df$move <- move_number
current_move_df$player <- as.character(move_colour)
current_move_df$piece_position_before <- as.character(current_move_df$piece_position_after)
current_move_df$piece_position_after <- as.character(current_move_df$piece_position_after)
current_move_df$movement <- current_move
#update with positions after the move
current_move_df <- add_next_move(current_move, move_colour, current_move_df)
all_moves_df <- rbind(all_moves_df, current_move_df)
}
View(all_moves_df)
all_moves_df <- initial_board
#how many moves to process
if(is.null(move_cutoff)){
total_moves <- total_move_nos(pgn)
} else {
total_moves <- move_cutoff
}
for(move_number in 1:16){
#pgn lists moves as 1. W B 2. W B ... so need to find 'round' first
pgn_round <- ceiling(move_number/2)
#then find which colour is taking the move
move_colours <- c("B", "W")
move_colour <- move_colours[(move_number %% 2) + 1]
current_move <- get_move(pgn, move_colour, pgn_round)
#subset the last move
current_move_df <- all_moves_df[which(all_moves_df$move == (move_number - 1)),]
#set the cols
current_move_df$move <- move_number
current_move_df$player <- as.character(move_colour)
current_move_df$piece_position_before <- as.character(current_move_df$piece_position_after)
current_move_df$piece_position_after <- as.character(current_move_df$piece_position_after)
current_move_df$movement <- current_move
#update with positions after the move
current_move_df <- add_next_move(current_move, move_colour, current_move_df)
all_moves_df <- rbind(all_moves_df, current_move_df)
}
View(all_moves_df)
all_moves_df <- initial_board
#how many moves to process
if(is.null(move_cutoff)){
total_moves <- total_move_nos(pgn)
} else {
total_moves <- move_cutoff
}
for(move_number in 1:17){
#pgn lists moves as 1. W B 2. W B ... so need to find 'round' first
pgn_round <- ceiling(move_number/2)
#then find which colour is taking the move
move_colours <- c("B", "W")
move_colour <- move_colours[(move_number %% 2) + 1]
current_move <- get_move(pgn, move_colour, pgn_round)
#subset the last move
current_move_df <- all_moves_df[which(all_moves_df$move == (move_number - 1)),]
#set the cols
current_move_df$move <- move_number
current_move_df$player <- as.character(move_colour)
current_move_df$piece_position_before <- as.character(current_move_df$piece_position_after)
current_move_df$piece_position_after <- as.character(current_move_df$piece_position_after)
current_move_df$movement <- current_move
#update with positions after the move
current_move_df <- add_next_move(current_move, move_colour, current_move_df)
all_moves_df <- rbind(all_moves_df, current_move_df)
}
View(all_moves_df)
move
current_move
current_move <- current_move
current_move_df <- remove_taken_pieces(move, current_move_df)
#the final position of the moving piece
if(!grepl("O-O", move)){
final_position <- clean_move(move)
#find the index of the moving piece
if(grepl("^[a-z]", move)){
#pawn move
moving_piece_index <- find_pawn_position(move, current_move_df)
} else if(grepl("K", move)){
#king move
moving_piece_index <- find_king_position(move, current_move_df)
} else if(grepl("Q", move)){
#queen move
moving_piece_index <- find_queen_position(move, current_move_df)
} else if(grepl("B", move)){
#bishop move
moving_piece_index <- find_bishop_position(move, current_move_df)
} else if(grepl("R", move)){
#rook move
moving_piece_index <- find_rook_position(move, current_move_df)
} else if(grepl("N", move)){
#knight move
moving_piece_index <- find_knight_position(move, current_move_df)
#castling
}
#move the piece
current_move_df$piece_position_after[moving_piece_index] <- final_position
}
king_row <- which(current_move_df$piece_colour == move_colour & current_move_df$piece == "K")
rook_rows <- which(current_move_df$piece_colour == move_colour & current_move_df$piece == "R")
if(move == "O-O"){
rook_row <- rook_rows[which(current_move_df$piece_position_before[rook_rows] == "h8")]
current_move_df$piece_position_after[king_row] <- gsub("e", "g", current_move_df$piece_position_before[king_row])
current_move_df$piece_position_after[rook_row] <- gsub("h", "f", current_move_df$piece_position_before[rook_row])
} else if(move == "O-O-O"){
rook_row <- rook_rows[which(current_move_df$piece_position_before[rook_rows] == "a8")]
current_move_df$piece_position_after[king_row] <- gsub("e", "c", current_move_df$piece_position_before[king_row])
current_move_df$piece_position_after[rook_row] <- gsub("a", "d", current_move_df$piece_position_before[rook_row])
}
move
move <- current_move
current_move_df <- remove_taken_pieces(move, current_move_df)
#the final position of the moving piece
if(!grepl("O-O", move)){
final_position <- clean_move(move)
#find the index of the moving piece
if(grepl("^[a-z]", move)){
#pawn move
moving_piece_index <- find_pawn_position(move, current_move_df)
} else if(grepl("K", move)){
#king move
moving_piece_index <- find_king_position(move, current_move_df)
} else if(grepl("Q", move)){
#queen move
moving_piece_index <- find_queen_position(move, current_move_df)
} else if(grepl("B", move)){
#bishop move
moving_piece_index <- find_bishop_position(move, current_move_df)
} else if(grepl("R", move)){
#rook move
moving_piece_index <- find_rook_position(move, current_move_df)
} else if(grepl("N", move)){
#knight move
moving_piece_index <- find_knight_position(move, current_move_df)
#castling
}
#move the piece
current_move_df$piece_position_after[moving_piece_index] <- final_position
}
king_row <- which(current_move_df$piece_colour == move_colour & current_move_df$piece == "K")
rook_rows <- which(current_move_df$piece_colour == move_colour & current_move_df$piece == "R")
if(move == "O-O"){
rook_row <- rook_rows[which(current_move_df$piece_position_before[rook_rows] == "h8")]
current_move_df$piece_position_after[king_row] <- gsub("e", "g", current_move_df$piece_position_before[king_row])
current_move_df$piece_position_after[rook_row] <- gsub("h", "f", current_move_df$piece_position_before[rook_row])
} else if(move == "O-O-O"){
rook_row <- rook_rows[which(current_move_df$piece_position_before[rook_rows] == "a8")]
current_move_df$piece_position_after[king_row] <- gsub("e", "c", current_move_df$piece_position_before[king_row])
current_move_df$piece_position_after[rook_row] <- gsub("a", "d", current_move_df$piece_position_before[rook_row])
}
View(current_move_df)
rook_rows <- which(current_move_df$piece_colour == move_colour & current_move_df$piece == "R")
rook_rows
rook_row <- rook_rows[grep("h", current_move_df$piece_position_before[rook_rows])]
rook_row
add_next_move <- function(move, move_colour, current_move_df){
#remove pieces that are about to be taken
current_move_df <- remove_taken_pieces(move, current_move_df)
#the final position of the moving piece
if(!grepl("O-O", move)){
final_position <- clean_move(move)
#find the index of the moving piece
if(grepl("^[a-z]", move)){
#pawn move
moving_piece_index <- find_pawn_position(move, current_move_df)
} else if(grepl("K", move)){
#king move
moving_piece_index <- find_king_position(move, current_move_df)
} else if(grepl("Q", move)){
#queen move
moving_piece_index <- find_queen_position(move, current_move_df)
} else if(grepl("B", move)){
#bishop move
moving_piece_index <- find_bishop_position(move, current_move_df)
} else if(grepl("R", move)){
#rook move
moving_piece_index <- find_rook_position(move, current_move_df)
} else if(grepl("N", move)){
#knight move
moving_piece_index <- find_knight_position(move, current_move_df)
#castling
}
#move the piece
current_move_df$piece_position_after[moving_piece_index] <- final_position
}
king_row <- which(current_move_df$piece_colour == move_colour & current_move_df$piece == "K")
rook_rows <- which(current_move_df$piece_colour == move_colour & current_move_df$piece == "R")
if(move == "O-O"){
rook_row <- rook_rows[grep("h", current_move_df$piece_position_before[rook_rows])]
current_move_df$piece_position_after[king_row] <- gsub("e", "g", current_move_df$piece_position_before[king_row])
current_move_df$piece_position_after[rook_row] <- gsub("h", "f", current_move_df$piece_position_before[rook_row])
} else if(move == "O-O-O"){
rook_row <- rook_rows[which(current_move_df$piece_position_before[rook_rows] == "a8")]
current_move_df$piece_position_after[king_row] <- gsub("e", "c", current_move_df$piece_position_before[king_row])
current_move_df$piece_position_after[rook_row] <- gsub("a", "d", current_move_df$piece_position_before[rook_row])
}
return(current_move_df)
}
current_move_df <- add_next_move(current_move, move_colour, current_move_df)
View(current_move_df)
library(kaRpov)
pgn <- "1.d4 Nf6 2.c4 e6 3.Nc3 Bb4 4.e3 O-O 5.Bd3 d5 6.Nf3 b6 7.a3 Bxc3+ 8.bxc3 c5 9.O-O Bb7 10.cxd5 exd5 11.a4 Nc6 12.Qb3 c4 13.Bxc4 dxc4 14.Qxc4 Re8 15.Re1 Na5 16.Qd3 Rc8 17.Ng5 Ng4 18.Qxh7+ Kf8 19.Ba3+ Rc5 20.dxc5 Nc6 21.cxb6+ Ne7 22.Qh8#"
#create the initial df
initial_board <- setup_board()
all_moves_df <- add_all_moves(pgn, initial_board, move_cutoff = NULL)
move_cutoff = NULL
all_moves_df <- initial_board
#how many moves to process
if(is.null(move_cutoff)){
total_moves <- total_move_nos(pgn)
} else {
total_moves <- move_cutoff
}
for(move_number in 1:total_moves){
#pgn lists moves as 1. W B 2. W B ... so need to find 'round' first
pgn_round <- ceiling(move_number/2)
#then find which colour is taking the move
move_colours <- c("B", "W")
move_colour <- move_colours[(move_number %% 2) + 1]
current_move <- get_move(pgn, move_colour, pgn_round)
#subset the last move
current_move_df <- all_moves_df[which(all_moves_df$move == (move_number - 1)),]
#set the cols
current_move_df$move <- move_number
current_move_df$player <- as.character(move_colour)
current_move_df$piece_position_before <- as.character(current_move_df$piece_position_after)
current_move_df$piece_position_after <- as.character(current_move_df$piece_position_after)
current_move_df$movement <- current_move
#update with positions after the move
current_move_df <- add_next_move(current_move, move_colour, current_move_df)
all_moves_df <- rbind(all_moves_df, current_move_df)
}
rm(list=ls())
all_moves_df <- add_all_moves(pgn, initial_board, move_cutoff = NULL)
initial_board <- setup_board()
all_moves_df <- add_all_moves(pgn, initial_board, move_cutoff = NULL)
pgn <- "1.d4 Nf6 2.c4 e6 3.Nc3 Bb4 4.e3 O-O 5.Bd3 d5 6.Nf3 b6 7.a3 Bxc3+ 8.bxc3 c5 9.O-O Bb7 10.cxd5 exd5 11.a4 Nc6 12.Qb3 c4 13.Bxc4 dxc4 14.Qxc4 Re8 15.Re1 Na5 16.Qd3 Rc8 17.Ng5 Ng4 18.Qxh7+ Kf8 19.Ba3+ Rc5 20.dxc5 Nc6 21.cxb6+ Ne7 22.Qh8#"
#create the initial df
initial_board <- setup_board()
all_moves_df <- add_all_moves(pgn, initial_board, move_cutoff = NULL)
pgn <- "1.d4 Nf6 2.c4 e6 3.Nc3 Bb4 4.e3 O-O 5.Bd3 d5 6.Nf3 b6 7.a3 Bxc3+ 8.bxc3 c5 9.O-O Bb7 10.cxd5 exd5 11.a4 Nc6 12.Qb3 c4 13.Bxc4 dxc4 14.Qxc4 Re8 15.Re1 Na5 16.Qd3 Rc8 17.Ng5 Ng4 18.Qxh7+ Kf8 19.Ba3+ Rc5 20.dxc5 Nc6 21.cxb6+ Ne7 22.Qh8#"
#create the initial df
initial_board <- setup_board()
all_moves_df <- add_all_moves(pgn, initial_board, move_cutoff = NULL)
library(kaRpov)
rm(list=ls())
pgn <- "1.d4 Nf6 2.c4 e6 3.Nc3 Bb4 4.e3 O-O 5.Bd3 d5 6.Nf3 b6 7.a3 Bxc3+ 8.bxc3 c5 9.O-O Bb7 10.cxd5 exd5 11.a4 Nc6 12.Qb3 c4 13.Bxc4 dxc4 14.Qxc4 Re8 15.Re1 Na5 16.Qd3 Rc8 17.Ng5 Ng4 18.Qxh7+ Kf8 19.Ba3+ Rc5 20.dxc5 Nc6 21.cxb6+ Ne7 22.Qh8#"
#create the initial df
initial_board <- setup_board()
all_moves_df <- add_all_moves(pgn, initial_board, move_cutoff = NULL)
library(kaRpov)
rm(list=ls())
pgn <- "1.d4 Nf6 2.c4 e6 3.Nc3 Bb4 4.e3 O-O 5.Bd3 d5 6.Nf3 b6 7.a3 Bxc3+ 8.bxc3 c5 9.O-O Bb7 10.cxd5 exd5 11.a4 Nc6 12.Qb3 c4 13.Bxc4 dxc4 14.Qxc4 Re8 15.Re1 Na5 16.Qd3 Rc8 17.Ng5 Ng4 18.Qxh7+ Kf8 19.Ba3+ Rc5 20.dxc5 Nc6 21.cxb6+ Ne7 22.Qh8#"
#create the initial df
initial_board <- setup_board()
all_moves_df <- add_all_moves(pgn, initial_board, move_cutoff = NULL)
library(kaRpov)
rm(list=ls())
pgn <- "1.d4 Nf6 2.c4 e6 3.Nc3 Bb4 4.e3 O-O 5.Bd3 d5 6.Nf3 b6 7.a3 Bxc3+ 8.bxc3 c5 9.O-O Bb7 10.cxd5 exd5 11.a4 Nc6 12.Qb3 c4 13.Bxc4 dxc4 14.Qxc4 Re8 15.Re1 Na5 16.Qd3 Rc8 17.Ng5 Ng4 18.Qxh7+ Kf8 19.Ba3+ Rc5 20.dxc5 Nc6 21.cxb6+ Ne7 22.Qh8#"
#create the initial df
initial_board <- setup_board()
all_moves_df <- add_all_moves(pgn, initial_board, move_cutoff = NULL)
create_chess_gif(all_moves_df, 20, "C:/Users/WS-Guest/Desktop/chess")
speed = 20
tween_moves_df <- tween_moves(all_moves_df, frames = 200)
name <- "C:/Users/WS-Guest/Desktop/lol"
saveGIF({
for (frame in min(tween_moves_df$.frame):max(tween_moves_df$.frame)){
plot <- plot_chess_board(frame, tween_moves_df)
print(plot)}
}, interval = 1/speed, movie.name = paste0(name, ".gif"))
library(animation)
saveGIF({
for (frame in min(tween_moves_df$.frame):max(tween_moves_df$.frame)){
plot <- plot_chess_board(frame, tween_moves_df)
print(plot)}
}, interval = 1/speed, movie.name = paste0(name, ".gif"))
View(tween_moves_df)
plot_chess_board <- function(frame, tween_moves_df){
chess_board_plot <- plot_board()
tween_moves_df <- tween_moves_df[which(tween_moves_df$.frame == frame),]
move_plot <- chess_board_plot +
mapply(add_pieces,
row = tween_moves_df$piece_row_numeric,
col = tween_moves_df$piece_col,
piece_id = tween_moves_df$.group,
size = 0.5)
return(move_plot)
}
saveGIF({
for (frame in min(tween_moves_df$.frame):max(tween_moves_df$.frame)){
plot <- plot_chess_board(frame, tween_moves_df)
print(plot)}
}, interval = 1/speed, movie.name = paste0(name, ".gif"))
tween_moves_df$.group
piece_id <- tween_moves_df$.group
piece <- gsub("\\.[0-9]", "", piece_id)
piece
get_piece_image <- function(piece) {
rasterGrob(readPNG(paste0(find.package("kaRpov"), "/data/", piece, ".png")))
}
saveGIF({
for (frame in min(tween_moves_df$.frame):max(tween_moves_df$.frame)){
plot <- plot_chess_board(frame, tween_moves_df)
print(plot)}
}, interval = 1/speed, movie.name = paste0(name, ".gif"))
add_pieces <- function(row, col, piece_id, size) {
piece <- gsub("\\.[0-9]", "", piece_id)
annotation_custom(get_piece_image(piece),
xmin = row - size, xmax = row + size,
ymin = col - size, ymax = col + size)
}
saveGIF({
for (frame in min(tween_moves_df$.frame):max(tween_moves_df$.frame)){
plot <- plot_chess_board(frame, tween_moves_df)
print(plot)}
}, interval = 1/speed, movie.name = paste0(name, ".gif"))
